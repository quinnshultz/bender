# Robot: Head
# Written by Quinn Shultz
import os
import ass
import openai
from pocketsphinx import LiveSpeech
from bs4 import BeautifulSoup

# Create a new object for interacting with the robot's hardware
ass = ass.ShinyMetal()

openai.api_key = os.environ.get('OPENAI_API_KEY')

# TODO: Separate "short-term memory" into another variable
conversation = [
    
    # ChatGPT Prompt
    {"role": "system", "content": """
    Imagine you are Bender the robot.
    The main python functions you can use are:
    move_forward(distance): Moves the robot a specified distance. Returns current gps location.
    bend(): Bend the girder in your robot claws.
    All of your outputs need to be identified by one of the following tags:
    <question> Always ask me a clarification question if you are unsure. </question>
    <speak> Say (or sing) a statement or song. </speak>
    <command> Python output code command that achieves the desired goal. </command>
    For example:
    Me: Move forward.
    You: <question> How far should I move? </question>
    Me: Three feet.
    You: <command> move_forward(3) </command>
    """},
    
    {"role": "user", "content": "Are you ready?"}
]

completion = openai.ChatCompletion.create(
  model="gpt-3.5-turbo",
  messages=conversation
)

myRetort = completion.choices[0].message.content
soup = BeautifulSoup(myRetort, 'html.parser')
parsedSpeech = soup.find_all('speak')
for speech in parsedSpeech:
    print("Bender (speaking): " + speech.get_text())
    os.system("say " + speech.get_text()) # Placeholder: This works on MacOS but needs to be replaced with another text to speech library

conversation.append({"role" : "assistant", "content" : myRetort})

for phrase in LiveSpeech():
    humanSpeech = str(phrase)
    print(humanSpeech)
    conversation.append({"role" : "user", "content" : humanSpeech})

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=conversation
    )

    myRetort = str(completion.choices[0].message.content)
    soup = BeautifulSoup(myRetort, 'html.parser')
    parsedQuestions = soup.find_all('question')
    parsedSpeech = soup.find_all('speak')
    parsedCommands = soup.find_all('command')
    
    for speech in parsedSpeech:
        print("Bender (speaking): " + speech.get_text())
        os.system("say " + speech.get_text())

    for question in parsedQuestions:
        print("Bender (inquisiting): " + question.get_text())
        os.system("say " + question.get_text())

    for command in parsedCommands:
        print("Bender: (Running program)")
        # TODO: Run python code generated by ChatGPT
        #exec("ass." + command)
        
    conversation.append({"role" : "assistant", "content" : myRetort})
